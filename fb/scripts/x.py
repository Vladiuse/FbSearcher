from threading import Thread
import requests as req
from time import time
from accounts.models import FbAccount
from ads.models import FbGroup, FbPagExample, MailService
from django.core.paginator import Paginator
from parsers import FbGroupPage, FbGroupPageNoAuth
from proxies.models import Proxy
import os
import random as r
from time import sleep
from requests.exceptions import ConnectTimeout
from collections import Counter
import re
from django.db.models import Count
from collections import Counter

# mail_services = MailService.objects.all()
# ids = ['1000021427054400', '1000041380019225', '1000253160054572', '100026143949', '1000282923390749', '1000359586797421', '1000387256755905', '1000392486681830', '1000422800130678', '1000434959966731', '100046612612', '1000498313333347', '100053898949', '1000689789955206', '1000763526608193', '1000826930012510', '1000986283269452', '100100005405328', '100100008074880', '100100066319330', '100100091453712', '100100105071390', '100100492343445', '100100569204583', '100100575412667', '100100595450550', '100101018155207', '100101279454249', '100101515209319', '100101545844733', '100101671447603', '100102148101660', '100102222991135', '100103022849141', '100103338481383', '100103441467029', '100103494721577', '100103608247895', '100103769287518', '100103864992094', '100104071851484', '100104074810874', '100104121530122', '100104419147228', '100104438274990', '100104442067092', '100104518434456', '100105079464576', '100105094943057', '100105257048367', '100105306025409', '100105318120483', '100105365012286', '100105395756085', '100105418177420', '100105621652541', '100105869188199', '100105951813296', '100105951856542', '100106011781284', '100106034704729', '100106038104382', '100106159009340', '100106370072989', '100106372166120', '100106501573447', '100106699278640', '100106918464082', '100106931449653', '100107061772623', '100107122576062', '100107395874461', '100107594927557', '100107695172309', '100107725139682', '100107982537005', '100108408166536', '100108888938565', '100108906733939', '100109135535694', '100109409540811', '100109526337167', '100109548344860', '100109568051748', '100109769253077', '100109959012327', '100110106025751', '100110551783099', '100110638215668', '100110691446025', '100110692001250', '100110699075255', '100110762265023', '100110768804162', '100110779300498', '100110939144499', '100111158093316', '100111205595902', '100112308053813', '100112349468879', '100112582105792', '100112642626123', '100112654917199', '100112769260413', '100112918496912', '100112995341274', '100113008488735', '100113136002655', '100113494742973', '100113541464939', '100113752601011', '100113849280049', '100113924970645', '100114038071684', '100114165739487', '100114271827473', '100114431771650', '100114566008483', '100114755302531', '100114848481786', '100114865165274', '100114892854753', '100115328484476', '100115352737986', '100115529680690', '100115678919813', '100115702641452', '100116071583129', '100116151448875', '100116338172073', '100116396108197', '100116425934346', '100116544688851', '100116662567022', '100116778942196', '100116794703458', '100117058288961', '100117122724725', '100117305608479', '100117385454469', '100117664754334', '100117668820647', '100117731520803', '100117948733378', '100117949519460', '100118299381272', '100118448122201', '100118461349090', '100118466352999', '100118551744764', '100119154666844', '1001193589922076', '100119674905643', '100119752354183', '100119952246', '100119981671668', '100120136068412', '100120218307673', '100120471345214', '100120508547804', '100120674890768', '100120696136353', '100120718941364', '100120782166198', '100120825073071', '1001208566574860', '100121022393824', '100121189767189', '100121358712248', '100121504768083', '100121532662793', '100121558825908', '1001216149945187', '100121785137573', '100122281477025', '100122308851398', '100122342080658', '100122466298718', '100122508275880', '100122541768259', '100122642100319', '100122771744897', '100122859296204', '100123038885320', '100123268193677', '100123268983345', '100123286264769', '100123291943737', '100123399848369', '100123978196627', '100124602623904', '100124619836798', '100124709108034', '100125278709721', '100125535152948', '100125601823635', '100125619476926', '100125675072407', '100125728470869']
# groups = FbGroup.objects.all()
#
def mark_email_service(group):
    for service in mail_services:
        if re.match('.+@'+service.pattern, group.email):
            group.email_service = service
            # print(group.email,service)
            group.save()
#
#
# for group in groups:
#     mark_email_service(group)

groups = FbGroup.full_objects.all()
# print(groups.count())
# mails_service_stat = FbGroup.full_objects.values('email_service').annotate(count=Count('*')).order_by('email_service')
# print(mails)

counter = Counter()
for group in groups:
    mail, service = group.email.split('@')
    counter[service] +=1


for i in counter.most_common(100):
    print(i)